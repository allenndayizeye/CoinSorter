import cv2
import cvzone
import numpy as np
import time
from gpiozero import OutputDevice


# Define the GPIO pins connected to IN1, IN2, IN3, IN4
IN1 = OutputDevice(17)
IN2 = OutputDevice(27)
IN3 = OutputDevice(24)
IN4 = OutputDevice(25)

STEP_PIN = OutputDevice(18)
DIR_PIN = OutputDevice(23)

# Step sequence for the 28BYJ-48 stepper motor
step_sequence = [
    [1, 0, 0, 0],
    [1, 1, 0, 0],
    [0, 1, 0, 0],
    [0, 1, 1, 0],
    [0, 0, 1, 0],
    [0, 0, 1, 1],
    [0, 0, 0, 1],
    [1, 0, 0, 1]
]

cap = cv2.VideoCapture(0)
cap.set(3, 640)
cap.set(4, 480)

classified = False
totalMoney = 0

def empty(a):
    pass

def platform_motor(steps, delay=0.001, reverse=False):
    if reverse:
        sequence = step_sequence[::-1]
    else:
        sequence = step_sequence

    for _ in range(steps):
        for step in sequence:
            IN1.value, IN2.value, IN3.value, IN4.value = step
            time.sleep(delay)

def deposit_motor(steps, delay=0.005, direction=True):
    if direction:
        DIR_PIN.on()
    else:
        DIR_PIN.off()
    for _ in range(steps):
        STEP_PIN.on()
        time.sleep(delay)
        STEP_PIN.off()
        time.sleep(delay)


def preProcessing(img):
    imgPre = cv2.GaussianBlur(img, (5,5), 3)
    imgPre = cv2.Canny(imgPre, 59, 416)
    kernel = np.ones((5,5), np.uint8)
    imgPre = cv2.dilate(imgPre, kernel, iterations=1)
    imgPre = cv2.morphologyEx(imgPre, cv2.MORPH_CLOSE, kernel)
    return imgPre

while True:
    success, img = cap.read()
    imgPre = preProcessing(img)
    imgContours, conFound = cvzone.findContours(img, imgPre, minArea=500)

    validContours = []

    # Filter for only contours with approx == 8
    if conFound:
        for contour in conFound:
            peri = cv2.arcLength(contour['cnt'], True)
            approx = cv2.approxPolyDP(contour['cnt'], 0.02 * peri, True)

            if len(approx) == 8 and contour['area'] > 20000:
                validContours.append((contour, approx))

    # If valid (8-point) contour is found and not yet classified
    if validContours and not classified:
        print("Valid coin shape detected. Waiting 1 second...")
        time.sleep(1)

        for contour, approx in validContours:
            area = contour['area']

            if 20000 < area < 24000:
                deposit_motor(0)
                time.sleep(1)
                platform_motor(50)
                time.sleep(1)
                deposit_motor(0, direction=False)
                platform_motor(38, reverse=True)

                totalMoney = 10
            elif 25000 < area < 29500:
                deposit_motor(40)
                time.sleep(1)
                platform_motor(50)
                time.sleep(1)
                deposit_motor(40, direction=False)
                platform_motor(38, reverse=True)
                totalMoney = 1
            elif 30000 < area < 37000:
                deposit_motor(80)
                time.sleep(1)
                platform_motor(50)
                time.sleep(1)
                deposit_motor(80, direction=False)
                platform_motor(38, reverse=True)
                totalMoney = 5
            elif 38500 < area < 50000:
                deposit_motor(120)
                time.sleep(1)
                platform_motor(50)
                time.sleep(1)
                deposit_motor(120, direction=False)
                platform_motor(38, reverse=True)
                totalMoney = 25
            else:
                totalMoney = 0

            print(f"Coin classified: {totalMoney} cents")
            classified = True  # Prevent reclassification

    # If no valid contours, reset state
    elif not validContours:
        classified = False
        totalMoney = 0

    imgStacked = cvzone.stackImages([img, imgPre, imgContours], 2, 1)
    cv2.imshow("image", imgStacked)

    cv2.waitKey(1)



import cv2
import numpy as np
from cv2 import namedWindow
from gpiozero import OutputDevice
from gpiozero import Button
from RPLCD.i2c import CharLCD
import RPi.GPIO as GPIO
from time import sleep
import time
import cvzone

# --------- Setup ---------
# Camera
cap = cv2.VideoCapture(0)
cap.set(3, 640)
cap.set(4, 480)
cv2.namedWindow("Camera", cv2.WINDOW_NORMAL)
cv2.resizeWindow("Camera", 1280,720)


# LCD via I2C
lcd = CharLCD('PCF8574', 0x27)

# Buttons
mode_button = Button(26, pull_up=True)
confirm_button = Button(19, pull_up=True)

# Modes
modes = ["Value", "Mint", "Year"]
current_mode = 0
selected_mode_active = False
totalMoney = 0

# Stepper motor via GPIOZero (can be expanded to 4-wire)
STEP_PIN = OutputDevice(18)
DIR_PIN = OutputDevice(23)

# Optional: 4-step sequence motor
IN1 = OutputDevice(17)
IN2 = OutputDevice(27)
IN3 = OutputDevice(24)
IN4 = OutputDevice(25)

# Step values for coin sorting
coin_position_steps = {
    "Penny": 0,
    "Nickel": 40,
    "Dime": 80,
    "Quarter": 120,
    "Token": 160
}

# --------- Functions ---------

def empty(a): pass

def preProcessing(img):
    imgPre = cv2.GaussianBlur(img, (5,5), 3)
    thresh1 = cv2.getTrackbarPos("Threshold1", "Settings")
    thresh2 = cv2.getTrackbarPos("Threshold2", "Settings")
    imgPre = cv2.Canny(imgPre, thresh1, thresh2)
    kernel = np.ones((2,2), np.uint8)
    imgPre = cv2.dilate(imgPre, kernel, iterations=1)
    imgPre = cv2.morphologyEx(imgPre, cv2.MORPH_CLOSE, kernel)
    return imgPre


def lcd_update():
    lcd.clear()
    if selected_mode_active:
        lcd.write_string(modes[current_mode].ljust(16))
        lcd.crlf()
        lcd.write_string("Insert Coin".ljust(16))
    else:
        lcd.write_string("Sorting Mode:".ljust(16))
        lcd.crlf()
        lcd.write_string(modes[current_mode].ljust(16))

def step_motor(steps, direction = 1, delay = 0.005):
    if direction == 1:
        DIR_PIN.on()
    else:
        DIR_PIN.off()

    for _ in range(abs(steps)):
        STEP_PIN.on()
        time.sleep(delay)
        STEP_PIN.off()
        time.sleep(delay)

# --------- Sorting Functions ---------

def sort_by_value():
    global totalMoney
    while selected_mode_active:
        success, img = cap.read()
        if not success:
            continue

        imgPre = preProcessing(img)
        imgContours, conFound = cvzone.findContours(img, imgPre, minArea=20)

        if conFound:
            for contour in conFound:
                peri = cv2.arcLength(contour['cnt'], True)
                approx = cv2.approxPolyDP(contour['cnt'], 0.02 * peri, True)

                if len(approx) > 5:
                    area = contour['area']
                    print(f"Contour area: {area}")

                    if 22600 < area < 22900:
                        totalMoney = 10
                    elif 25300 < area < 25600:
                        totalMoney = 1
                    elif 32000 < area < 32300:
                        totalMoney = 5
                    elif 40600 < area < 40800:
                        totalMoney = 25
                    else:
                        totalMoney = 0

        if totalMoney == 1:
            value = "Penny"
        elif totalMoney == 5:
            value = "Nickel"
        elif totalMoney == 10:
            value = "Dime"
        elif totalMoney == 25:
            value = "Quarter"
        else:
            value = "Token"

        print(f"Coin detected as: {value}")
        lcd.clear()
        lcd.write_string(f"Detected: {value}")
        lcd.crlf()
        lcd.write_string("Sorting...")

        if value in coin_position_steps:
            steps = coin_position_steps[value]
            step_motor(steps, direction=1)
            sleep(1)
            step_motor(steps, direction=-1)

        sleep(3)
        lcd_update()

def sort_by_mint():
    print("Sorting by Mint (placeholder)")
    lcd.clear()
    lcd.write_string("Sorting by Mint")
    step_motor(60)
    sleep(3)
    lcd_update()

def sort_by_year():
    print("Sorting by Year (placeholder)")
    lcd.clear()
    lcd.write_string("Sorting by Year")
    step_motor(100)
    sleep(3)
    lcd_update()

# --------- Button Callbacks ---------

def mode_button_callback():
    global current_mode
    if not selected_mode_active:
        current_mode = (current_mode + 1) % len(modes)
        lcd_update()
        print(f"Mode changed to: {modes[current_mode]}")

def confirm_button_callback():
    global selected_mode_active
    selected_mode_active = True
    lcd_update()
    selected_mode = modes[current_mode]
    print(f"Confirmed mode: {selected_mode}")

    if selected_mode == "Value":
        sort_by_value()
    elif selected_mode == "Mint":
        sort_by_mint()
    elif selected_mode == "Year":
        sort_by_year()

# --------- Main Setup ---------

cv2.namedWindow("Settings")
cv2.resizeWindow("Settings", 640, 240)
cv2.createTrackbar("Threshold1", "Settings", 117, 255, empty)
cv2.createTrackbar("Threshold2", "Settings", 255, 255, empty)

lcd_update()

# Main loop to check buttons
while True:
    if mode_button.is_pressed:
        mode_button_callback()
        sleep(0.3)
    if confirm_button.is_pressed:
        confirm_button_callback()
        sleep(0.3)
